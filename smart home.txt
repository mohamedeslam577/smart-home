#include <Arduino.h>
#include <Keypad.h>
#include <ESP32Servo.h>
#include <LiquidCrystal_I2C.h> //lcd
#include<Wire.h> //lcd
#include <DHT.h>
#include <Adafruit_Sensor.h> //dht 11
#include <PubSubClient.h> // cloud 
#include <WiFiClientSecure.h>
#include <WiFi.h>

// objects
WiFiClientSecure espClient;
PubSubClient client(espClient);

// WiFi credentials
char ssid[] = "My Space";
char pass[] = "myspace2024";

// HiveMQ Cloud connection
const char* mqtt_server = "d13b8e3fb5d74ecd827e8cfde4ace40f.s1.eu.hivemq.cloud";
const char* mqtt_username = "smarthome/project";
const char* mqtt_password = "Fcdssmarthome777";
const int mqtt_port = 8883;

void setupMQTT() {
  client.setServer(mqtt_server, mqtt_port);
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Reconnecting to MQTT Broker...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX); 
    if (client.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Connected.");
      // Publish an announcement...
      client.publish("ESP32/status", "Hi I'm ESP32");
    } else {
      Serial.print("Failed to connect. State: ");
      Serial.println(client.state());
      delay(5000);
    }
  }
}

// Keypad setup
const byte ROWS = 4; // four rows
const byte COLS = 4; // four columns
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
// Connect to the row pinouts of the keypad
byte rowPins[ROWS] = {13, 12, 14, 27}; 
// Connect to the column pinouts of the keypad
byte colPins[COLS] = {26, 25, 33, 32}; 
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// ir pin
const int irSensorPin = 39;

// Servos setup
Servo doorServo;
Servo garageServo;
const int servoPin = 16; // door pin , RX2
const int garagePin = 17; //garage pin , TX2
const int openAngle = 90;  // Angle to open the lock
const int closeAngle = 0;  // Angle to close the lock

// boolean servos is open or not
bool dooropen = false;
bool garageopen = false;

// TV pin
const int TVPin = 23; // for both button and led
bool TVOn = false; // Current state of the TV

// LED setup
const int dooryellowLED = 15; // Yellow LED for keypad activity
const int doorredLED = 2;    // Red LED for incorrect password
const int doorgreenLED = 4;  // Green LED for correct password

//Home door password
String correctPassword = "1234"; // Set your password here
bool focusOnDoor = false;  //  LCD should focus on the door

// LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Adjust the LCD address and size 

// sensors Pin definitions
int flamePin = 34;  // Flame Sensor
int pirPin = 35;    // PIR Motion Sensor
int gasPin = 36;    // MQ-2 Gas Sensor , vp pin 
int dhtPin = 18;    // DHT11 Sensor
int buzzerPin = 19; // Buzzer

// DHT11 setup
#define DHTTYPE DHT11
DHT dht(dhtPin, DHTTYPE);



void setup() {
  Serial.begin(9600);

  doorServo.attach(servoPin);
  garageServo.attach(garagePin);
  garageServo.write(closeAngle); // Initially, keep the garage locked
  doorServo.write(closeAngle);  // Initially, keep the door locked

  // Set GPIO23 as input initially to read button state
  pinMode(TVPin, INPUT_PULLUP); // Enable internal pull-up resistor

  // LED setup
  pinMode(dooryellowLED, OUTPUT);
  pinMode(doorredLED, OUTPUT);
  pinMode(doorgreenLED, OUTPUT);
  digitalWrite(dooryellowLED, LOW); // Ensure yellow LED is off
  digitalWrite(doorredLED, LOW);     // Ensure red LED is off
  digitalWrite(doorgreenLED, LOW);   // Ensure green LED is off

  // LCD setup
  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Welcome to our");
  lcd.setCursor(0, 1);
  lcd.print("Smart Home");
  delay(2000);

  // Initialize sensors pins
    // Initialize DHT11 sensor
    dht.begin();
  pinMode(gasPin, INPUT);
  pinMode(flamePin, INPUT);
  pinMode(pirPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(dhtPin, INPUT);

  // Ensure the buzzer is off at the start
  digitalWrite(buzzerPin, LOW);

  // Connecting to WiFi
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, pass);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // Disable SSL certificate verification (not recommended for production)
  espClient.setInsecure();

  setupMQTT();
}


void grantAccess() {
  dooropen = true;
  client.publish("home/door", dooropen ? "T" : "F");
  doorServo.write(180);     // Open the door
  digitalWrite(dooryellowLED, LOW);   // Turn off the yellow LED
  digitalWrite(doorgreenLED, HIGH);   // Turn on the green LED  
  lcd.clear();
  lcd.print("Access Granted");
  delay(2000);                    // Keep the door open for 3 seconds
  doorServo.write(closeAngle);    // Close the door
  dooropen = false;
  client.publish("home/door", dooropen ? "T" : "F");
  digitalWrite(doorgreenLED, LOW);    // Turn off the green LED
  focusOnDoor = false;  // Reset LCD to normal mode after access check
}

void denyAccess() {
  digitalWrite(dooryellowLED, LOW);   // Turn off the yellow LED
  digitalWrite(doorredLED, HIGH);     // Turn on the red LED
  lcd.clear();
  lcd.print("Access Denied");
  delay(2000);                    // Keep the red LED on for 3 seconds
  digitalWrite(doorredLED, LOW);      // Turn off the red LED
  focusOnDoor = false;  // Reset LCD to normal mode after access check
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  char key = keypad.getKey();  // Get the key pressed and store it in the 'key' variable

  // Read the button state    
    bool buttonPressed = digitalRead(TVPin) == LOW; // Button pressed is LOW

  // * to start password and keypad
  if (key == '*') {
    Serial.print("* Pressed: ");
    String inputPassword = "";
    digitalWrite(dooryellowLED, HIGH); // ready to enter password
    focusOnDoor = true;  // Set LCD to focus on door-related messages
    lcd.clear();
    lcd.print("Enter Password:");

    while(key!='#'){
      key = keypad.getKey();
      if(key){
        
        // press # to say that password is end
        if (key == '#') {
        // Check if the input password matches the correct password
        if (inputPassword == correctPassword) {
          Serial.println("Access Granted");
          grantAccess();
        } else {
          Serial.println("Access Denied");
          denyAccess();
        }

      } else if (key == 'A') {
        // Clear the current input
        inputPassword = "";
        Serial.println("Input Cleared");
        lcd.clear();
        lcd.print("Input cleared");
      } else {
        // Append the pressed key to the password input
        inputPassword += key;
        Serial.print("Current Password Input: ");
        Serial.println(inputPassword);
        lcd.clear();
        lcd.print(inputPassword);
      }
      }
    }
  }  

  // Read gas sensor value
    int gasValue = analogRead(gasPin);
    String gasMessage = String(gasValue) + " ppm";
    client.publish("gas/sensor", gasMessage.c_str());

  // Read flame sensor value
    int flameValue = digitalRead(flamePin);
    const char* flameStatus;
    if (flameValue == LOW) {
    flameStatus = "Detected";
    } else {
    flameStatus = "Not Detected";
    }
    client.publish("flame/sensor", flameStatus);

  // Read PIR motion sensor value
    int pirState = digitalRead(pirPin);
    const char* motionStatus;
    if (pirState == HIGH) {
    motionStatus = "Detected";
    } else {
    motionStatus = "Not Detected";
    }
    client.publish("pir/sensor", motionStatus);
  
  // Read temperature and humidity from DHT11
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    String tempMessage = String(temperature) + " Â°C";
    client.publish("temp/sensor", tempMessage.c_str());    
    String humidityMessage = String(humidity) + "%";
    client.publish("humidity/sensor", humidityMessage.c_str());


  if (!focusOnDoor) {
    // If not focusing on the door, display all sensor data here
    // Code to display all sensor data on the LCD
    lcd.clear();

    // gas
      Serial.println("Gas Sensor Value: " + String(gasValue)+" ppm");
      if (gasValue > 200) { // Adjust threshold 
        Serial.println("Gas Detected!");
        digitalWrite(buzzerPin, HIGH); // Activate the buzzer
        delay(100);
        digitalWrite(buzzerPin, LOW); 
        delay(50);
      } else{
        Serial.println("No Gas Detected.");
      }
      // Display gas sensor value
      lcd.setCursor(0, 0);  
      lcd.print("Gas: ");
      lcd.print(gasValue);
      lcd.print(" ppm");  // units for gas concentration
      
    // flame 
      // Display flame sensor status
      lcd.setCursor(0, 1);
      lcd.print("Flame: ");
      if (flameValue == LOW) {
        Serial.println("Flame Detected!");
        lcd.print("Detected");
        digitalWrite(buzzerPin, HIGH); // Activate the buzzer
        delay(100);
        digitalWrite(buzzerPin, LOW); 
        delay(50);
      } else {
        Serial.println("No Flame Detected.");
        lcd.print("Not Detected");
      }

    delay(2000); // Wait 2 seconds before clearing 
    lcd.clear(); // clear the lcd for next data

    // pir
      // Display PIR motion sensor status
      lcd.setCursor(0, 0);
      lcd.print("Motion: ");
      if (pirState == HIGH) {
        Serial.println("Motion Detected!");
        lcd.print("Detected");
        digitalWrite(buzzerPin, HIGH); // Activate the buzzer
        delay(100);
        digitalWrite(buzzerPin, LOW); 
        delay(50);
      } else {
        Serial.println("No Motion Detected.");
        lcd.print("Not Detected");
      }

    //dht 11
      Serial.println("Temperature: " + String(temperature) + "Â°C");
      Serial.println("Humidity: " + String(humidity) + "%");  
      // Display temperature and humidity
      lcd.setCursor(0, 1);  
      lcd.print(temperature);
      lcd.print("C  ");
      lcd.print(humidity);
      lcd.print("%");

    delay(2000); // Wait 2 seconds before clearing   
  }
   
  // Turn on the LED if button is pressed and LED is not already on
  if (buttonPressed && !TVOn) {
    TVOn = true; // Update TV state to ON
    pinMode(TVPin, OUTPUT); // Change to output mode to control LED
    client.publish("tv/on", TVOn ? "T" : "F");
    digitalWrite(TVPin, HIGH); // Turn on TV
  }
  else{
    pinMode(TVPin, INPUT_PULLUP); // Change back to input mode to turn off LED
    client.publish("tv/on", TVOn ? "T" : "F");
  }

  // Garage door by ir sensor
  // Read the analog value from the IR sensor
  int irread = analogRead(irSensorPin);
  // Map the raw IR value to a distance range
  int distance = map(irread, 0, 4095, 1, 25);
  Serial.println("IR distance: "+distance);
  if (distance < 10) {
    // Open the servo
    garageopen = true;
    client.publish("garage/door", garageopen ? "T" : "F");
    garageServo.write(90);
    delay(1000);
    garageServo.write(0);
    garageopen = false;
    client.publish("garage/door", garageopen ? "T" : "F");
  
  }

  
  delay(1000);
}